{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","getProgram","provider","Program","createGifAccount","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","account","fetch","sendGif","length","addGif","onVoteUp","index","index_arg","BN","upvoteGif","memo_getGifList","useCallback","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","src","gifLink","alt","userAddress","voteCount","href","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7558ee69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { Program, Provider, web3, BN } from \"@project-serum/anchor\";\nimport { clusterApiUrl, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n// Constants\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the acocunt that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transation is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState(null);\n\n  // Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n        }\n\n        /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log(\n          \"Connected with Public Key:\",\n          response.publicKey.toString()\n        );\n\n        /*\n         * Set the user's publicKey in state to be used later!\n         */\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const getProgram = (provider) => {\n    return new Program(idl, programID, provider);\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.error(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGitList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link gieven!\");\n      return;\n    }\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onVoteUp = async (index) => {\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n      const index_arg = new BN(index);\n\n      await program.rpc.upvoteGif(index_arg, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      console.log(\"Voted tallied!\");\n\n      await getGifList();\n    } catch (error) {\n      console.log(`Error upvoting GIF (index=${index}):`, error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program acocunt hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={async (event) => {\n              event.preventDefault();\n              await sendGif();\n              setInputValue(\"\");\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <figure className=\"gif-item\" key={index}>\n                <img\n                  src={item.gifLink}\n                  alt={`From ${item.userAddress.toString()}`}\n                />\n                <figcaption className=\"gif-caption\">\n                  From {item.userAddress.toString()}\n                  <br />\n                  votes = {item.voteCount.toString()} ðŸ’–{\" \"}\n                  <button onClick={() => onVoteUp(index)}>VOTE UP!</button>\n                </figcaption>\n              </figure>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const memo_getGifList = useCallback(getGifList, []);\n\n  // useEffects\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      memo_getGifList();\n    }\n  }, [walletAddress, memo_getGifList]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ“– Emoji Cookbook</p>\n          <p className=\"sub-text\">\n            Share recipes for your favourite emoji mixups âœ¨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n          <p className=\"sub-text\">\n            Inspired by <a href=\"https://tikolu.net/emojimix/\">emojimix</a>\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}